    var data = {
	           "nodes":[
		   	{"index":0, "block_nr":1, "block_reward": 25, "trans":123456, "diff": 40300003032789, "vol": 49.2},
			{"index":1, "block_nr":2,"block_reward": 25, "trans":123456, "diff": 40300003032789, "vol": 49.2},
		   ],
		   "links":[
		   	{"source":0,"target":1},
		   ]
    };

var elmnt = document.getElementById("area2");
        
var h = 950;
var w = elmnt.offsetWidth;
var radius = 6;
  
var coinSize = 40;
var t0 = Date.now();


//D3 force layout setup
var force = d3.layout.force()
    .gravity(0.01)
    .charge(-30)
    .linkDistance(60)
    .nodes(data.nodes)
    .links(data.links)
    .size([w, h])
    .start();

//create the main body + SVG elements
var svgContainer = d3.select("#area2").append("svg")	
    .attr("width", w)
    .attr("height", h);
     
var link = svgContainer.selectAll(".link")
    .data(data.links)
    .enter().append("line")
    .attr("class", "link");

var node = svgContainer.selectAll("image")
    .data(data.nodes)
    .enter().append("image")
    .attr("xlink:href", "/images/Bitcoin.png")
    .attr("width", coinSize)//diameter
    .attr("height", coinSize)
    .attr("r", radius - .75)
    .attr("x",-20)
    .attr("y",-20)

    .on("mouseover", tableUpdate)
    .on("mouseout", resizeCoin )
    .call(force.drag);




force.on("tick", function() {

node.attr("cx", function(d) { return d.x = Math.max(15, Math.min(w - 15, d.x)); })
    .attr("cy", function(d) { return d.y = Math.max(15, Math.min(h - 15, d.y)); });
link.attr("x1", function(d) { return d.source.x; })
    .attr("y1", function(d) { return d.source.y; })
    .attr("x2", function(d) { return d.target.x; })
    .attr("y2", function(d) { return d.target.y; });

node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")";});
force.start();	
});

var s = 1;
var t = 2;

d3.select("#release").on("click", updateBlock);

function updateBlock(nodes){
    //window.alert("Releasing ...");
    data.links.push({"source":s++,"target":t++});
    data.nodes.push({"x":10, "y":10, "block_nr":nodes.height, "block_reward": 25, "trans":nodes.difficulty, "diff": nodes.difficulty, "vol": nodes.reward});

    link = link.data(data.links);
    link.enter().insert("line", "image")
      .attr("class", "link");

    force.linkStrength(function(d,i) {
        if (d.target.index == s) return 0.01;
        return 1; })

    node = node.data(data.nodes);

    node.enter().insert("image")
        .attr("xlink:href", "/images/Bitcoin.png")
        .attr("width", coinSize)//diameter
        .attr("height", coinSize)
        .attr("x",-(coinSize/2))
        .attr("y",-(coinSize/2))
        .on("mouseover", tableUpdate )
        .on("mouseout", resizeCoin )
        .call(force.drag);

    force.start();
}

function tableUpdate(d) {
	 d3.select(this).transition()
        .duration(50)
        .attr("width", coinSize + 10)
        .attr("height", coinSize + 10);
   
	d3.select("#datapoint1")
	   .html(d.hash);
	d3.select("#datapoint2")
	   .html(d.branch);
	d3.select("#datapoint3")
	   .html(d.previous_block_hash);
	d3.select("#datapoint4")
   	    .html(d.height);
	d3.select("#datapoint5")
	   .html(d.confirmations);
	d3.select("#datapoint6")
	   .html(d.merkle_root);
	d3.select("#datapoint7")
	   .html(d.time);
	d3.select("#datapoint8")
	   .html(d.created_at);
	d3.select("#datapoint9")
	   .html(d.nonce);
	d3.select("#datapoint10")
	   .html(d.bits);
	d3.select("#datapoint11")
	   .html(d.difficulty);
	d3.select("#datapoint12")
	   .html(d.reward);
	d3.select("#datapoint13")
	   .html(d.fees);
	d3.select("#datapoint14")
	   .html(d.total_out);
	d3.select("#datapoint15")
	   .html(d.size);
	d3.select("#datapoint16")
	   .html(d.transactions_count);
}

function resizeCoin(d){
    d3.select(this)
        .transition()
        .duration(50)
        .attr("width", coinSize)
        .attr("height", coinSize);
}
	

//old code
/*
* Define the div for the tooltip
* var div = d3.select("#area2").append("div")   
*   .attr("class", "tooltip")               
*    .style("opacity", 0);
*/

var primus = Primus.connect();
primus.on("open", function (){
        console.log("connected ");
});
primus.on("data", function incoming(data){
	console.log("new data incoming"); 
        var nodes = [];
       	var nodes = JSON.parse(data);
	//existingblock(nodes);
	for (i = 0; i < nodes.length; i++) { 
		updateBlock(nodes[i]);			
	}
	//primus.end();
});

primus.on('disconnection', function (spark) {
	// the spark that disconnected
	console.log("disconnected");
});

//This new event to get latest block from updateblock.js file. was testing. worked from www but not updateblock.js
primus.on('newblock', function(data){
	var james = [];
	var james = JSON.parse(data)
	console.log(james);
});
  

